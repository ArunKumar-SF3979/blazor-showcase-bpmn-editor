@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Buttons
@using System.Collections.ObjectModel
@using System.Text.Json;
@inherits SampleBaseComponent;

@namespace BPMNEditor


<div class="db-diagram-container">
    <div id="diagramContainerDiv" class=@DiagramContainerClassName style="position:relative;">        
        <SfDiagramComponent @ref="@Diagram" NodeCreating="@OnNodeCreating"  ConnectorCreating= "@OnConnectorCreating" SelectionSettings="@selectionSettings" GetCustomTool="@GetCustomTool" @bind-Width="@DiagramWidth" @bind-Height="@DiagramHeight" SizeChanged="@SizeChanged" PositionChanged ="@PositionChanged" RotationChanged="@RotateChanged" SelectionChanged ="@SelectionChanged" DragDrop="@Drop" @bind-Nodes="@nodes" @bind-Connectors="@connectors" HistoryChanged="@HistoryChange"  InteractionController="@DiagramTool" @bind-DrawingObject="@DiagramDrawingObject" ScrollChanged="ScrollChanged" CollectionChanged="CollectionChanged"  TextChanged="TextChanged" Created="OnCreated" GetCustomCursor="@cursor">
            <PageSettings @bind-ShowPageBreaks="@DiagramShowPageBreaks" @bind-Orientation="@DiagramOrientation" @bind-Width="@DiagramPageWidth" @bind-Height="@DiagramPageHeight" @bind-MultiplePage=@IsMultiplePage>
                <BackgroundStyle @bind-Background="@DiagramBgColor"></BackgroundStyle>
                <PageMargin @bind-Left="@marginLeft" @bind-Top="@marginRight"></PageMargin>
            </PageSettings>
            <SnapSettings @bind-Constraints="@SnapConstraint">
                <HorizontalGridLines LineIntervals="@SnapIntervals" LineColor="@Hlinecolor" SnapIntervals="@SnapIntervals1" DotIntervals="@HDotIntervals"></HorizontalGridLines>
                <VerticalGridLines LineIntervals="@SnapIntervals" LineColor="@Vlinecolor" SnapIntervals="@SnapIntervals1" DotIntervals="@VDotIntervals"></VerticalGridLines>
            </SnapSettings>
            <ScrollSettings @bind-ScrollLimit="@scrollLimit" @bind-CurrentZoom="@CurrentZoom" @bind-MaxZoom="@maxZoom" @bind-MinZoom="@minZoom"></ScrollSettings>
              <ContextMenuSettings Show="true"
                                         @bind-Items="@Items"
                                         ContextMenuOpening="@BeforeOpen"
                                         ContextMenuItemClicked="@ItemClicked"></ContextMenuSettings>
        </SfDiagramComponent>
    </div>
</div>
@code {

    /// <summary>
    /// Gets or sets the collection of nodes in the diagram.
    /// </summary>
    public DiagramObjectCollection<Node> nodes { get; set; } = new DiagramObjectCollection<Node>();
    /// <summary>
    /// Gets or sets the collection of connectors in the diagram.
    /// </summary>
    public DiagramObjectCollection<Connector> connectors  {get;set;}= new DiagramObjectCollection<Connector>();
    /// <summary>
    /// Gets or sets the collection of user handles in the diagram.
    /// </summary>
    public DiagramObjectCollection<UserHandle> handles = new DiagramObjectCollection<UserHandle>();
    /// <summary>
    /// Gets or sets the CSS class applied to the main diagram container element in the application.
    /// </summary>
    public string DiagramContainerClassName = "db-current-diagram-container";
    /// <summary>
    /// Gets or sets the horizontal line intervals for the gridlines.
    /// </summary>
    public double[] HLineIntervals { get; set; } = new double[] { 1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75,};
    /// <summary>
    /// Gets or sets the vertical line intervals for the gridlines.
    /// </summary>
    public double[] VLineIntervals { get; set; } = new double[] { 1.25, 18.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75, 0.25, 19.75,};   
    /// <summary>
    /// Gets or sets the selection settings for the diagram.
    /// </summary>    
    DiagramSelectionSettings selectionSettings = new DiagramSelectionSettings();
    /// <summary>
    /// Represents a drawing object in the diagram.
    /// </summary>
    public IDiagramObject? DiagramDrawingObject { get; set; }
    /// <summary>
    /// Represents a diagram interaction tool.
    /// </summary>
    public DiagramInteractions DiagramTool = DiagramInteractions.Default;
    /// <summary>
    /// Gets or sets the scroll limit for the diagram's viewport.
    /// </summary>
    public ScrollLimitMode scrollLimit { get; set; } = ScrollLimitMode.Infinity;
    /// <summary>
    /// Gets or sets the current zoom level of the diagram.
    /// </summary>
    public double CurrentZoom { get; set; } = 1;
    /// <summary>
    /// Gets or sets the min zoom level of the diagram.
    /// </summary>
    public double minZoom { get; set; } = 0.25;
    /// <summary>
    /// Gets or sets the max zoom level of the diagram.
    /// </summary>
    public double maxZoom { get; set; } = 30;
    /// <summary>
    /// Gets or sets the value that indicates whether the diagram's page break should be visible
    /// </summary>
    public bool DiagramShowPageBreaks = false;

    public PageOrientation DiagramOrientation = PageOrientation.Landscape;
    /// <summary>
    /// Gets or sets the page width for the diagram.
    /// </summary>
    public double? DiagramPageWidth = 816;
    /// <summary>
    /// Gets or sets the page height for the diagram.
    /// </summary>
    public double? DiagramPageHeight = 1056;
    /// <summary>
    /// Gets or sets the diagram's width.
    /// </summary>
    public string DiagramWidth = "100%";
    /// <summary>
    /// Gets or sets the diagram's height.
    /// </summary>
    public string DiagramHeight = "100%";
    /// <summary>
    /// Gets or sets the left margin of the diagram content.
    /// </summary>
    double marginLeft = 5;
    /// <summary>
    /// Gets or sets the right margin of the diagram content.
    /// </summary>
    double marginRight = 5;  
    /// <summary>
    /// Gets or sets the horizontal grid color of the diagram.
    /// </summary>
    public string Hlinecolor { get; set; } = "lightgray";
    /// <summary>
    /// Gets or sets the vertical grid color of the diagram.
    /// </summary>
    public string Vlinecolor { get; set; } = "lightgray";
    /// <summary>
    /// Gets or sets a value indicating whether the diagram is set to display multiple pages.
    /// </summary>
    public bool IsMultiplePage = true;
    public double[] SnapIntervals1 { get; set; } = new double[] {
           20
    };
    /// <summary>
    /// Gets or sets a value indicating whether an undo operation is available in the diagram.
    /// </summary>
    public bool IsUndo = false;
    /// <summary>
    /// Gets or sets a value indicating whether a redo operation is available in the diagram.
    /// </summary>
    public bool IsRedo = false;
    /// <summary>
    /// Gets or sets the background color of the diagram.
    /// </summary>
    public string DiagramBgColor = "white";  
    /// <summary>
    /// Gets or sets the snap constraint for the diagram.
    /// </summary>
    public SnapConstraints SnapConstraint = SnapConstraints.All;
    /// <summary>
    /// Gets or sets the snap intervals in the diagram.
    /// </summary>

    public double[] SnapIntervals { get; set; } = new double[] {
            1, 9, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75, 0.25, 9.75
    };   
    /// <summary>
    /// Gets or sets the vertical spacing.
    /// </summary>
    int VerticalSpacing = 50;
    /// <summary>
    /// Gets or sets the vertical spacing.
    /// </summary>
    int HorizontalSpacing = 100;
    public bool show = true;
    /// <summary>
    /// Property used to indicate when a diagram element is selected or deselected.
    /// </summary>
    public bool diagramSelected = false;
    DiagramObjectCollection<KeyboardCommand> commands = new DiagramObjectCollection<KeyboardCommand>();
    /// <summary>
    /// Gets or sets the context menu items.
    /// </summary>
    List<ContextMenuItem> Items = new List<ContextMenuItem>();
    /// <summary>
    /// Represents a list of event type associated with BPMN shapes.
    /// </summary>
    List<string> Event = new List<string>() { "EventType", "Trigger" };
    /// <summary>
    /// Represents a list of gateway type associated with BPMN shapes.
    /// </summary>
    List<string> GateWay = new List<string>() { "GateWayType" };
    /// <summary>
    /// Represents a list of message type associated with BPMN shapes.
    /// </summary>
    List<string> Message = new List<string>() { };
    /// <summary>
    /// Represents a list of dataobject type associated with BPMN shapes.
    /// </summary>
    List<string> DataObject = new List<string>() { "Collection", "DataObjectType" };
    List<string> DataStore = new List<string>() { };
    /// <summary>
    /// Represents a list of activity type associated with BPMN shapes.
    /// </summary>
    List<string> Activity = new List<string>() { "ActivityType", "Loop", "Compensation", };
    /// <summary>
    /// Represents a list of activitytask type associated with BPMN shapes.
    /// </summary>
    List<string> ActivityTask = new List<string>() { "Call", "TaskType", };
    /// <summary>
    /// Represents a list of collasped subprocess associated with BPMN shapes.
    /// </summary>
    List<string> ActivityCollapsedSubProcess = new List<string>() { "AdHoc", "Boundary" };
    /// <summary>
    /// Represents a list of expanded subprocess associated with BPMN shapes.
    /// </summary>
    List<string> ExpandedSubProcess = new List<string>() { "Loop", "AdHoc", "Compensation", "Boundary" };
    List<string> TextAnnotation = new List<string>() { "Orientation" };
    /// <summary>
    /// Represents a list of sequence connector type associated with BPMN shapes.
    /// </summary>
    List<string> BpmnSequenceConnector = new List<string>() { "Sequence", "Message", "Association", "Condition" };
    /// <summary>
    /// Represents a list of message connector type associated with BPMN shapes.
    /// </summary>
    List<string> BpmnMessageConnector = new List<string>() { "Sequence", "Message", "Association", "Initiating" };
    /// <summary>
    /// Represents a list of association connector type associated with BPMN shapes.
    /// </summary>
    List<string> BpmnAssociationConnector = new List<string>() { "Sequence", "Message", "Association", "Direction" };

    public double[] HDotIntervals { get; set; } = new double[] { 1, 19, 0.5, 19.5, 0.5, 19.5, 0.5, 19.5, 0.5, 19.5, };
    public double[] VDotIntervals { get; set; } = new double[] { 1, 19, 0.5, 19.5, 0.5, 19.5, 0.5, 19.5, 0.5, 19.5, };
#pragma warning disable CS0414
    /// <summary>
    /// Gets or sets the horizontal alignment of the objects in diagram.
    /// </summary>
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Auto;
    /// <summary>
    /// Gets or sets the vertical alignment of the objects in diagram.
    /// </summary>
    private VerticalAlignment verticalAlignment = VerticalAlignment.Auto;
#pragma warning restore CS0414



    protected override void OnInitialized()
    {
        InitDiagramModel();
        InitContextItems();    
        UpdateHandle();      
    }

    public async Task OnNotify(NotifyProperties prop)
    {
        await InvokeAsync(() =>
        {   if (this.Service != null)
            {
                this.Service.Prop.RestricMouseEvents = false;
            }
        });
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);     

    }
    /// <summary>
    /// This method is used to render the user handles
    /// </summary>
    private void UpdateHandle()
    {
        UserHandle deleteHandle = AddHandle("Delete", "delete", Direction.Bottom, 0);
        UserHandle drawHandle = AddHandle("Draw", "draw", Direction.Right, 0.5);
        UserHandle cloneHandle = AddHandle("Clone", "clone", Direction.Bottom, 1);
        handles.Add(deleteHandle);
        handles.Add(drawHandle);
        handles.Add(cloneHandle);
        selectionSettings.UserHandles = handles;           

    }
    /// <summary>
    /// Adds a user handle to the object with the specified properties.
    /// </summary>
    /// <param name="name">The name of the user handle.</param>
    /// <param name="path">The path of the user handle.</param>
    /// <param name="direction">The direction of the user handle.</param>
    /// <param name="offset">The offset value for the uswer handle.</param>
    private UserHandle AddHandle(string name, string path, Direction direction, double offset)
    {
        UserHandle handle = new UserHandle()
            {
                Name = name,
                Visible = true,
                Offset = offset,
                Side = direction,             
                Margin = new DiagramThickness() { Top = 0, Bottom = 0, Left = 0, Right = 0 }
            };
        if (path == "delete")
        {            
            handle.PathData = "M0.54700077,2.2130003 L7.2129992,2.2130003 7.2129992,8.8800011 C7.2129992,9.1920013 7.1049975,9.4570007 6.8879985,9.6739998 6.6709994,9.8910007 6.406,10 6.0939997,10 L1.6659999,10 C1.3539997,10 1.0890004,9.8910007 0.87200136,9.6739998 0.65500242,9.4570007 0.54700071,9.1920013 0.54700077,8.8800011 z M2.4999992,0 L5.2600006,0 5.8329986,0.54600048 7.7599996,0.54600048 7.7599996,1.6660004 0,1.6660004 0,0.54600048 1.9270014,0.54600048 z";
        }
        else if(path == "draw")
        {
            handle.PathData = "M3.9730001,0 L8.9730001,5.0000007 3.9730001,10.000001 3.9730001,7.0090005 0,7.0090005 0,2.9910006 3.9730001,2.9910006 z";
        }
        else
        {
            handle.PathData = "M10.13,0 L1.45,0 C0.66,0,0,0.55,0,1.26 L0,10 L1.45,10 L1.45,1.26 L10.1,1.26 L10.1,0 Z M12.3,2.49 L4.36,2.49 C3.57,2.49,2.91,3.04,2.91,3.75 L2.91,12.49 C2.91,13.18,3.54,13.75,4.36,13.75 L12.3,13.75 C13.09,13.75,13.75,13.2,13.75,12.49 L13.75,3.75 C13.72,3.07,13.09,2.49,12.3,2.49 Z M12.3,12.47 L4.36,12.47 L4.36,3.75 L12.3,3.75 L12.3,12.47 Z";
        }
        return handle;
    }
    /// <summary>
    /// This method is used to provide height and width of the node while creating
    /// </summary>
    /// <param name="obj">The node object to which the height and width has to be changed</param>
    private void OnNodeCreating(IDiagramObject obj)
    {
        Node node = new Node();
        if (obj != null && obj is Node nodeobj) 
        {
             node = nodeobj;
        }
        if (!Parent.MenuBar.IsPasteOptionEnabled)
        {
            if (node != null)
            {
                if (node.Shape is BpmnEvent)
                {
                    node.Width = 50;
                    node.Height = 50;
                }
                else if (node.Shape is BpmnMessage)
                {
                    node.Width = 72;
                    node.Height = 48;
                }
                else if (node.Shape is BpmnDataObject)
                {
                    node.Width = 48;
                    node.Height = 62;
                }
                else if (node.Shape is BpmnDataStore)
                {
                    node.Width = 96;
                    node.Height = 72;
                }
                else if (node.Shape is BpmnActivity bpmnActivity)
                {
                    node.Width = 120;
                    node.Height = 80;
                }
                else if (node.Shape is BpmnGateway)
                {
                    node.Width = 90;
                    node.Height = 80;
                }
                else if (node.Shape is BpmnTextAnnotation)
                {
                    node.Width = 96;
                    node.Height = 72;
                }
                else if (node.Shape is BpmnExpandedSubProcess)
                {
                    node.Width = 300;
                    node.Height = 300;
                }
            }
        }else
        {
            Parent.MenuBar.IsPasteOptionEnabled = false;
        }
        if (node != null)
        {
            node.Constraints = node.Constraints |= NodeConstraints.AllowDrop;
        }
    }  
    /// <summary>
    /// This method is used to provide height and width of the connector while creating
    /// </summary>
    /// <param name="obj">The connector object to which the height and width has to be changed</param>
    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector connector = new Connector();
        if (obj != null && obj is Connector connecobj)
        {
            connector = connecobj;
        }
        if (connector != null)
        {
            connector.Style.Fill = "black";
            connector.Style.StrokeColor = "black";
            connector.Style.Opacity = 1;
            connector.TargetDecorator.Style.Fill = "black";
            connector.TargetDecorator.Style.StrokeColor = "black";
        }
    }
    // Creates Context menu items.
    private void InitContextItems()
    {
        Items = new List<ContextMenuItem>()
        {
                new ContextMenuItem()
                {
                    Text = "Loop",
                    ID = "bpmn_Loop",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Loop",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Standard",
                    ID = "Loop",
                    IconCss = "e-uncheck", },
                        new ContextMenuItem (){ Text = "Parallel Multi-Instance",
                    ID = "Loop",
                    IconCss = "e-icons e-uncheck", },
                   new ContextMenuItem (){ Text = "Sequential Multi-Instance",
                    ID = "Loop",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Task Type",
                    ID = "bpmn_TaskType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Service",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Receive",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                    new ContextMenuItem (){ Text = "Send",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Instantiating Receive",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Manual",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                    new ContextMenuItem (){ Text = "Business Rule",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "User",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Script",
                    ID = "TaskType",
                    IconCss = "e-icons e-uncheck", },
                    }

                },
                new ContextMenuItem()
                {
                    Text = "Compensation",
                    ID = "bpmn_Compensation",
                    IconCss = "e-icons e-uncheck"

                },
                new ContextMenuItem()
                {
                    Text = "Call",
                    ID = "bpmn_Call",
                    IconCss = "e-icons e-uncheck"

                },
                new ContextMenuItem()
                {
                    Text = "Ad-Hoc",
                    ID = "bpmn_AdHoc",
                    IconCss = "e-icons e-uncheck"

                },
                new ContextMenuItem()
                {
                    Text = "Sequence Flow",
                    ID = "bpmn_Sequence",
                    IconCss = "e-icons e-uncheck"

                },
                new ContextMenuItem()
                {
                    Text = "Message Flow",
                    ID = "bpmn_Message",
                    IconCss = "e-icons e-uncheck"

                },
                new ContextMenuItem()
                {
                    Text = "Association",
                    ID = "bpmn_Association",
                    IconCss = "e-icons e-uncheck"

                },
                new ContextMenuItem()
                {
                    Text = "Condition",
                    ID = "bpmn_Condition",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Condition",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Conditional",
                    ID = "Condition",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Default",
                    ID = "Condition",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Initiating",
                    ID = "bpmn_Initiating",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Initiating",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Initiating",
                    ID = "Initiating",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Non-Initiating",
                    ID = "Initiating",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Direction",
                    ID = "bpmn_Direction",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Direction",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "One",
                    ID = "Direction",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Both",
                    ID = "Direction",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Activity Type",
                    ID = "bpmn_ActivityType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "Task",
                    ID = "ActivityType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Collapsed Sub-Process",
                    ID = "ActivityType",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "GateWay Type",
                    ID = "bpmn_GateWayType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Inclusive",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Exclusive",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Parallel",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Event Based",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Event Based (Exclusive)",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Event Based (Parallel)",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Complex",
                    ID = "GateWayType",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Event Type",
                    ID = "bpmn_EventType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "Start",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Start (Non-Interrupting)",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Intermediate",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Intermediate (Non-Interrupting)",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Intermediate (Throwing)",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "End",
                    ID = "Event Type",
                    IconCss = "e-icons e-uncheck", }
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Trigger/Result",
                    ID = "bpmn_Trigger",
                    IconCss = "e-uncheck",
                     Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Message",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Timer",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Error",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                     new ContextMenuItem (){ Text = "Compensation",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Conditional",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Signal",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Multiple",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Escalation",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Parallel Multiple",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Link",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Cancel",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Terminate",
                    ID = "Trigger",
                    IconCss = "e-icons e-uncheck", },
                    }

                },
                new ContextMenuItem()
                {
                    Text = "Collection",
                    ID = "bpmn_Collection",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "Collection",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Collection",
                    ID = "Collection",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Data Object",
                    ID = "bpmn_DataObjectType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "DataObjectType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Input",
                    ID = "DataObjectType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Output",
                    ID = "DataObjectType",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Boundary",
                    ID = "bpmn_Boundary",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "Default",
                    ID = "Boundary",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Call",
                    ID = "Boundary",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Event",
                    ID = "Boundary",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Transaction",
                    ID = "Boundary",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                  new ContextMenuItem()
                {
                    Text = "SubProcessTypes",
                    ID = "bpmn_SubProcessTypes",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "None",
                    ID = "SubProcessTypes",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Transaction",
                    ID = "SubProcessTypes",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Event",
                    ID = "SubProcessTypes",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "Orientation",
                    ID = "bpmn_Orientation",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "Left",
                    ID = "Orientation",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Right",
                    ID = "Orientation",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Top",
                    ID = "Orientation",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Bottom",
                    ID = "Orientation",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "Auto",
                    ID = "Orientation",
                    IconCss = "e-icons e-uncheck", },
                    }
                },
                new ContextMenuItem()
                {
                    Text = "FlowType",
                    ID = "bpmn_FlowType",
                    IconCss = "e-icons e-uncheck",
                    Items = new List<ContextMenuItem>(){
                        new ContextMenuItem (){ Text = "AssociationFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "DirectionalAssociationFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "BiDirectionalAssociationFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "MessageFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "InitiatingMessageFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "NonInitiatingMessageFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "SequenceFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "DefaultSequenceFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                        new ContextMenuItem (){ Text = "ConditionalSequenceFlow",
                    ID = "FlowType",
                    IconCss = "e-icons e-uncheck", },
                    }

                },
        };
    }

    /// <summary>
    /// This method is called when the context menu item is clicked
    /// </summary>  
    private void ItemClicked(DiagramMenuClickEventArgs args)
    {

        if(args.Item.Text =="Paste")
        {
            Parent.MenuBar.IsPasteOptionEnabled = true;
        }
        if (Diagram.SelectionSettings.Nodes.Count != 0 && Diagram.SelectionSettings.Connectors.Count == 0)
        {
            Node node = Diagram.SelectionSettings.Nodes[0];
            if (args.Item.ID == "Loop")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.None;
                            }
                            break;
                        case "Standard":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.Standard;
                            }
                            break;
                        case "Parallel Multi-Instance":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.ParallelMultiInstance;
                            }
                            break;
                        case "Sequential Multi-Instance":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.SequenceMultiInstance;
                            }
                            break;
                    }
                }
                else if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.None;
                            }
                            break;
                        case "Standard":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.Standard;
                            }
                            break;
                        case "Parallel Multi-Instance":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.ParallelMultiInstance;
                            }
                            break;
                        case "Sequential Multi-Instance":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.SequenceMultiInstance;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "TaskType")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.None;
                            }
                            break;
                        case "Service":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Service;
                            }
                            break;
                        case "Receive":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Receive;
                            }
                            break;
                        case "Send":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Send;
                            }
                            break;
                        case "Instantiating Receive":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.InstantiatingReceive;
                            }
                            break;
                        case "Manual":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Manual;
                            }
                            break;
                        case "Business Rule":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.BusinessRule;
                            }
                            break;
                        case "User":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.User;
                            }
                            break;
                        case "Script":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Script;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "bpmn_Compensation")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    bpmnActivity.IsCompensation = !bpmnActivity.IsCompensation;
                }
                if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    bpmnExpandedSubProcess.IsCompensation = !bpmnExpandedSubProcess.IsCompensation;
                }
            }
            else if (args.Item.ID == "bpmn_Call")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    bpmnActivity.IsCall = !bpmnActivity.IsCall;
                }
            }
            else if (args.Item.ID == "ActivityType")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    switch (args.Item.Text)
                    {
                        case "Task":
                            {
                                bpmnActivity.ActivityType = BpmnActivityType.Task;
                            }
                            break;
                        case "Collapsed Sub-Process":
                            {
                                bpmnActivity.ActivityType = BpmnActivityType.CollapsedSubProcess;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "GateWayType")
            {
                if (node.Shape is BpmnGateway bpmnGateway)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.None;
                            }
                            break;
                        case "Exclusive":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Exclusive;
                            }
                            break;
                        case "Inclusive":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Inclusive;
                            }
                            break;
                        case "Parallel":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Parallel;
                            }
                            break;
                        case "Complex":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Complex;
                            }
                            break;
                        case "Event Based":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.EventBased;
                            }
                            break;
                        case "Event Based (Exclusive)":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.ExclusiveEventBased;
                            }
                            break;
                        case "Event Based (Parallel)":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.ParallelEventBased;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Event Type")
            {
                if (node.Shape is BpmnEvent bpmnSubEvent)
                {
                    switch (args.Item.Text)
                    {
                        case "Start":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.Start;
                            }
                            break;
                        case "Intermediate":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.Intermediate;
                            }
                            break;
                        case "End":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.End;
                            }
                            break;
                        case "Start (Non-Interrupting)":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.NonInterruptingStart;
                            }
                            break;
                        case "Intermediate (Non-Interrupting)":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.NonInterruptingIntermediate;
                            }
                            break;
                        case "Intermediate (Throwing)":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.ThrowingIntermediate;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Trigger")
            {
                if (node.Shape is BpmnEvent bpmnSubEvent)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.None;
                            }
                            break;
                        case "Message":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Message;
                            }
                            break;
                        case "Timer":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Timer;
                            }
                            break;
                        case "Escalation":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Escalation;
                            }
                            break;
                        case "Link":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Link;
                            }
                            break;
                        case "Error":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Error;
                            }
                            break;
                        case "Compensation":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Compensation;
                            }
                            break;
                        case "Signal":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Signal;
                            }
                            break;
                        case "Multiple":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Multiple;
                            }
                            break;
                        case "Parallel Multiple":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Parallel;
                            }
                            break;
                        case "Cancel":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Cancel;
                            }
                            break;
                        case "Conditional":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Conditional;
                            }
                            break;
                        case "Terminate":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Terminate;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Collection")
            {
                if (node.Shape is BpmnDataObject bpmnDataObject)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnDataObject.IsCollectiveData = false;
                            }
                            break;
                        case "Collection":
                            {
                                bpmnDataObject.IsCollectiveData = true;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "DataObjectType")
            {
                if (node.Shape is BpmnDataObject bpmnDataObject)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnDataObject.DataObjectType = BpmnDataObjectType.None;
                            }
                            break;
                        case "Input":
                            {
                                bpmnDataObject.DataObjectType = BpmnDataObjectType.Input;
                            }
                            break;
                        case "Output":
                            {
                                bpmnDataObject.DataObjectType = BpmnDataObjectType.Output;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Boundary")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    if (bpmnActivity.ActivityType == BpmnActivityType.CollapsedSubProcess)
                    {
                        switch (args.Item.Text)
                        {
                            case "Default":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Default;
                                }
                                break;
                            case "Call":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Call;
                                }
                                break;
                            case "Event":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Event;
                                }
                                break;
                            case "Transaction":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Transaction;
                                }
                                break;
                        }
                    }
                }
                if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {

                    switch (args.Item.Text)
                    {
                        case "Default":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Default;
                            }
                            break;
                        case "Call":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Call;
                            }
                            break;
                        case "Event":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Event;
                            }
                            break;
                        case "Transaction":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Transaction;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.Text == "Ad-Hoc")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    bpmnActivity.IsAdhoc = !bpmnActivity.IsAdhoc;

                }
                if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    bpmnExpandedSubProcess.IsAdhoc = !bpmnExpandedSubProcess.IsAdhoc;

                }
            }
            else if (args.Item.ID == "Orientation")
            {
                if (node.Shape is BpmnTextAnnotation bpmnTextAnnotation)
                {
                    switch (args.Item.Text)
                    {
                        case "Atuo":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Auto;
                            }
                            break;
                        case "Left":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Left;
                            }
                            break;
                        case "Right":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Right;
                            }
                            break;
                        case "Top":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Top;
                            }
                            break;
                        case "Bottom":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Bottom;
                            }
                            break;
                    }
                }
            }
        }
        else if (Diagram.SelectionSettings.Nodes.Count == 0 && Diagram.SelectionSettings.Connectors.Count != 0)
        {
            Connector connector = Diagram.SelectionSettings.Connectors[0];
            if (connector.Shape is BpmnFlow bpmnShape)
            {
                if (args.Item.ID == "bpmn_Sequence")
                {
                    bpmnShape.Flow = BpmnFlowType.SequenceFlow;
                }
                if (args.Item.ID == "bpmn_Message")
                {
                    bpmnShape.Flow = BpmnFlowType.MessageFlow;
                }
                if (args.Item.ID == "bpmn_Association")
                {
                    bpmnShape.Flow = BpmnFlowType.AssociationFlow;
                }
                if (args.Item.ID == "Direction")
                {
                    if (args.Item.Text == "None")
                    {
                        bpmnShape.Flow = BpmnFlowType.AssociationFlow;
                    }
                    else if (args.Item.Text == "One")
                    {
                        bpmnShape.Flow = BpmnFlowType.DirectionalAssociationFlow;
                    }
                    else if (args.Item.Text == "Both")
                    {
                        bpmnShape.Flow = BpmnFlowType.BiDirectionalAssociationFlow;
                    }
                }
                if (args.Item.ID == "Condition")
                {
                    if (args.Item.Text == "None")
                    {
                        bpmnShape.Flow = BpmnFlowType.SequenceFlow;
                    }
                    else if (args.Item.Text == "Default")
                    {
                        bpmnShape.Flow = BpmnFlowType.DefaultSequenceFlow;
                    }
                    else if (args.Item.Text == "Conditional")
                    {
                        bpmnShape.Flow = BpmnFlowType.ConditionalSequenceFlow;
                    }
                }
                if (args.Item.ID == "Initiating")
                {
                    if (args.Item.Text == "None")
                    {
                        bpmnShape.Flow = BpmnFlowType.MessageFlow;
                    }
                    else if (args.Item.Text == "Initiating")
                    {
                        bpmnShape.Flow = BpmnFlowType.InitiatingMessageFlow;
                    }
                    else if (args.Item.Text == "Non-Initiating")
                    {
                        bpmnShape.Flow = BpmnFlowType.NonInitiatingMessageFlow;
                    }
                }
            }
        }
        else if (Diagram.SelectionSettings.Nodes.Count != 0 && Diagram.SelectionSettings.Connectors.Count != 0)
        {
            Node node = Diagram.SelectionSettings.Nodes[0];
            if (args.Item.ID == "Loop")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.None;
                            }
                            break;
                        case "Standard":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.Standard;
                            }
                            break;
                        case "Parallel Multi-Instance":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.ParallelMultiInstance;
                            }
                            break;
                        case "Sequential Multi-Instance":
                            {
                                bpmnActivity.Loop = BpmnLoopCharacteristic.SequenceMultiInstance;
                            }
                            break;
                    }
                }
                else if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.None;
                            }
                            break;
                        case "Standard":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.Standard;
                            }
                            break;
                        case "Parallel Multi-Instance":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.ParallelMultiInstance;
                            }
                            break;
                        case "Sequential Multi-Instance":
                            {
                                bpmnExpandedSubProcess.Loop = BpmnLoopCharacteristic.SequenceMultiInstance;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "TaskType")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.None;
                            }
                            break;
                        case "Service":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Service;
                            }
                            break;
                        case "Receive":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Receive;
                            }
                            break;
                        case "Send":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Send;
                            }
                            break;
                        case "Instantiating Receive":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.InstantiatingReceive;
                            }
                            break;
                        case "Manual":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Manual;
                            }
                            break;
                        case "Business Rule":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.BusinessRule;
                            }
                            break;
                        case "User":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.User;
                            }
                            break;
                        case "Script":
                            {
                                bpmnActivity.TaskType = BpmnTaskType.Script;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "bpmn_Compensation")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    bpmnActivity.IsCompensation = !bpmnActivity.IsCompensation;
                }
                if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    bpmnExpandedSubProcess.IsCompensation = !bpmnExpandedSubProcess.IsCompensation;
                }
            }
            else if (args.Item.ID == "bpmn_Call")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    bpmnActivity.IsCall = !bpmnActivity.IsCall;
                }
            }
            else if (args.Item.ID == "ActivityType")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    switch (args.Item.Text)
                    {
                        case "Task":
                            {
                                bpmnActivity.ActivityType = BpmnActivityType.Task;
                            }
                            break;
                        case "Collapsed Sub-Process":
                            {
                                bpmnActivity.ActivityType = BpmnActivityType.CollapsedSubProcess;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "GateWayType")
            {
                if (node.Shape is BpmnGateway bpmnGateway)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.None;
                            }
                            break;
                        case "Exclusive":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Exclusive;
                            }
                            break;
                        case "Inclusive":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Inclusive;
                            }
                            break;
                        case "Parallel":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Parallel;
                            }
                            break;
                        case "Complex":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.Complex;
                            }
                            break;
                        case "Event Based":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.EventBased;
                            }
                            break;
                        case "Event Based (Exclusive)":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.ExclusiveEventBased;
                            }
                            break;
                        case "Event Based (Parallel)":
                            {
                                bpmnGateway.GatewayType = BpmnGatewayType.ParallelEventBased;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Event Type")
            {
                if (node.Shape is BpmnEvent bpmnSubEvent)
                {
                    switch (args.Item.Text)
                    {
                        case "Start":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.Start;
                            }
                            break;
                        case "Intermediate":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.Intermediate;
                            }
                            break;
                        case "End":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.End;
                            }
                            break;
                        case "Start (Non-Interrupting)":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.NonInterruptingStart;
                            }
                            break;
                        case "Intermediate (Non-Interrupting)":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.NonInterruptingIntermediate;
                            }
                            break;
                        case "Intermediate (Throwing)":
                            {
                                bpmnSubEvent.EventType = BpmnEventType.ThrowingIntermediate;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Trigger")
            {
                if (node.Shape is BpmnEvent bpmnSubEvent)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.None;
                            }
                            break;
                        case "Message":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Message;
                            }
                            break;
                        case "Timer":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Timer;
                            }
                            break;
                        case "Escalation":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Escalation;
                            }
                            break;
                        case "Link":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Link;
                            }
                            break;
                        case "Error":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Error;
                            }
                            break;
                        case "Compensation":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Compensation;
                            }
                            break;
                        case "Signal":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Signal;
                            }
                            break;
                        case "Multiple":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Multiple;
                            }
                            break;
                        case "Parallel Multiple":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Parallel;
                            }
                            break;
                        case "Cancel":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Cancel;
                            }
                            break;
                        case "Conditional":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Conditional;
                            }
                            break;
                        case "Terminate":
                            {
                                bpmnSubEvent.Trigger = BpmnEventTrigger.Terminate;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Collection")
            {
                if (node.Shape is BpmnDataObject bpmnDataObject)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnDataObject.IsCollectiveData = false;
                            }
                            break;
                        case "Collection":
                            {
                                bpmnDataObject.IsCollectiveData = true;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "DataObjectType")
            {
                if (node.Shape is BpmnDataObject bpmnDataObject)
                {
                    switch (args.Item.Text)
                    {
                        case "None":
                            {
                                bpmnDataObject.DataObjectType = BpmnDataObjectType.None;
                            }
                            break;
                        case "Input":
                            {
                                bpmnDataObject.DataObjectType = BpmnDataObjectType.Input;
                            }
                            break;
                        case "Output":
                            {
                                bpmnDataObject.DataObjectType = BpmnDataObjectType.Output;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.ID == "Boundary")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    if (bpmnActivity.ActivityType == BpmnActivityType.CollapsedSubProcess)
                    {
                        switch (args.Item.Text)
                        {
                            case "Default":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Default;
                                }
                                break;
                            case "Call":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Call;
                                }
                                break;
                            case "Event":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Event;
                                }
                                break;
                            case "Transaction":
                                {
                                    bpmnActivity.SubProcessType = BpmnSubProcessType.Transaction;
                                }
                                break;
                        }
                    }
                }
                if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {

                    switch (args.Item.Text)
                    {
                        case "Default":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Default;
                            }
                            break;
                        case "Call":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Call;
                            }
                            break;
                        case "Event":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Event;
                            }
                            break;
                        case "Transaction":
                            {
                                bpmnExpandedSubProcess.SubProcessType = BpmnSubProcessType.Transaction;
                            }
                            break;
                    }
                }
            }
            else if (args.Item.Text == "Ad-Hoc")
            {
                if (node.Shape is BpmnActivity bpmnActivity)
                {
                    bpmnActivity.IsAdhoc = !bpmnActivity.IsAdhoc;

                }
                if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    bpmnExpandedSubProcess.IsAdhoc = !bpmnExpandedSubProcess.IsAdhoc;

                }
            }
            else if (args.Item.ID == "Orientation")
            {
                if (node.Shape is BpmnTextAnnotation bpmnTextAnnotation)
                {
                    switch (args.Item.Text)
                    {
                        case "Auto":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Auto;
                            }
                            break;
                        case "Left":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Left;
                            }
                            break;
                        case "Right":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Right;
                            }
                            break;
                        case "Top":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Top;
                            }
                            break;
                        case "Bottom":
                            {
                                bpmnTextAnnotation.TextAnnotationDirection = TextAnnotationDirection.Bottom;
                            }
                            break;
                    }
                }
            }
        }
    }
    /// <summary>
    /// This event call back method will be called before opening the context menu
    /// </summary>  

    private void BeforeOpen(DiagramMenuOpeningEventArgs args)
    {
        if (Diagram.SelectionSettings.Nodes.Count != 0 && Diagram.SelectionSettings.Connectors.Count == 0)
        {
            Node node = Diagram.SelectionSettings.Nodes[0];            
            if (node.Shape.Type == NodeShapes.Bpmn)
            {
                if (node.Shape is BpmnEvent bpmnEvent)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !Event.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && Event.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Event Type")
                            {
                                if (bpmnEvent.EventType == BpmnEventType.Start)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Start")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.NonInterruptingStart)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Start (Non-Interrupting)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.Intermediate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Intermediate")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.NonInterruptingIntermediate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Intermediate (Non-Interrupting)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.ThrowingIntermediate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Intermediate (Throwing)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.End)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "End")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Trigger/Result")
                            {
                                if (bpmnEvent.Trigger == BpmnEventTrigger.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Error)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Error")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Timer)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Timer")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Terminate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Terminate")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Multiple)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Multiple")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Escalation)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Escalation")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Signal)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Signal")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Message)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Message")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Cancel)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Cancel")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Compensation)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Compensation")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Conditional)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Conditional")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Error)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Error")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Parallel)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel Multiple")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Link)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Link")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnGateway bpmnGateway)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !GateWay.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && GateWay.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "GateWay Type")
                            {
                                if (bpmnGateway.GatewayType == BpmnGatewayType.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.Inclusive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Inclusive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }

                                if (bpmnGateway.GatewayType == BpmnGatewayType.Exclusive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Exclusive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }

                                if (bpmnGateway.GatewayType == BpmnGatewayType.Parallel)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }

                                if (bpmnGateway.GatewayType == BpmnGatewayType.EventBased)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event Based")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }

                                if (bpmnGateway.GatewayType == BpmnGatewayType.ExclusiveEventBased)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event Based (Exclusive)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.ParallelEventBased)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event Based (Parallel)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.Complex)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Complex")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnMessage)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !Message.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && Message.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                    }
                }
                else if (node.Shape is BpmnDataObject bpmnDataObject)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !DataObject.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && DataObject.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Collection")
                            {
                                foreach (var subItem in item.Items)
                                {
                                    if ((subItem.Text == "Collection" && bpmnDataObject.IsCollectiveData) || (subItem.Text == "None" && !bpmnDataObject.IsCollectiveData))
                                    {
                                        subItem.IconCss = "e-icons e-check";
                                    }
                                    else
                                    {
                                        subItem.IconCss = "e-icons e-uncheck";
                                    }
                                }
                            }
                            if (item.Text == "Data Object")
                            {
                                foreach (var subItem in item.Items)
                                {
                                    if (subItem.Text == bpmnDataObject.DataObjectType.ToString())
                                    {
                                        subItem.IconCss = "e-icons e-check";
                                    }
                                    else
                                    {
                                        subItem.IconCss = "e-icons e-uncheck";
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnDataStore)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !DataStore.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                    }
                }
                else if (node.Shape is BpmnActivity bpmnActivity)
                {
                    foreach (var item in args.Items)
                    {
                        if (bpmnActivity.ActivityType == BpmnActivityType.Task)
                        {
                            if (item.ID.Split('_')[0] == "bpmn" && !(Activity.Contains(item.ID.Split('_')[1]) || ActivityTask.Contains(item.ID.Split('_')[1])))
                            {
                                args.HiddenItems.Add(item.ID);
                            }
                            if (item.Text == "Task Type")
                            {
                                if (bpmnActivity.TaskType == BpmnTaskType.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Service)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Service")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Receive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Receive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Send)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Send")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.InstantiatingReceive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Instantiating Receive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Manual)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Manual")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.BusinessRule)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Business Rule")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.User)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "User")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Script)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Script")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Call")
                            {
                                if (bpmnActivity.IsCall)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }

                        }
                        if (bpmnActivity.ActivityType == BpmnActivityType.CollapsedSubProcess)
                        {
                            if (item.ID.Split('_')[0] == "bpmn" && !(Activity.Contains(item.ID.Split('_')[1]) || ActivityCollapsedSubProcess.Contains(item.ID.Split('_')[1])))
                            {
                                args.HiddenItems.Add(item.ID);
                            }
                            if (item.ID.Split('_')[0] == "bpmn" && ActivityCollapsedSubProcess.Contains(item.ID.Split('_')[1]))
                            {
                                if (item.Text == "Ad-Hoc")
                                {
                                    if (bpmnActivity.IsAdhoc)
                                    {
                                        item.IconCss = "e-icons e-check";
                                    }
                                    else
                                    {
                                        item.IconCss = "e-icons e-uncheck";
                                    }
                                }

                                if (item.Text == "Boundary")
                                {
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Default)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Default")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Event)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Event")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Call)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Call")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Transaction)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Transaction")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }

                                }
                            }
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && Activity.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Loop")
                            {
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.Standard)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Standard")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.ParallelMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.SequenceMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Sequential Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Compensation")
                            {
                                if (bpmnActivity.IsCompensation)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }
                            if (item.Text == "Activity Type")
                            {
                                if (bpmnActivity.ActivityType == BpmnActivityType.Task)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Task")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.ActivityType == BpmnActivityType.CollapsedSubProcess)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Collapsed Sub-Process")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !ExpandedSubProcess.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && ExpandedSubProcess.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Loop")
                            {
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.Standard)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Standard")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.ParallelMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.SequenceMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Sequential Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Compensation")
                            {
                                if (bpmnExpandedSubProcess.IsCompensation)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }
                            if (item.Text == "Ad-Hoc")
                            {
                                if (bpmnExpandedSubProcess.IsAdhoc)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }
                            if (item.Text == "Boundary")
                            {
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Default)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Default")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Event)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Call)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Call")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Transaction)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Transaction")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnTextAnnotation bpmnTextAnnotation)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !TextAnnotation.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && TextAnnotation.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Orientation")
                            {
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Left)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Left")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Right)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Right")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Top)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Top")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Bottom)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Bottom")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Auto)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Auto")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else if (Diagram.SelectionSettings.Nodes.Count == 0 && Diagram.SelectionSettings.Connectors.Count != 0)
        {
            Connector connector = Diagram.SelectionSettings.Connectors[0];
            Node node = (Node)Diagram.GetObject(connector.TargetID);
            if (connector.Shape is BpmnFlow bpmnShape)
            {
                foreach (var item in args.Items)
                {
                    if (bpmnShape.Flow == BpmnFlowType.AssociationFlow || bpmnShape.Flow == BpmnFlowType.BiDirectionalAssociationFlow || bpmnShape.Flow == BpmnFlowType.DirectionalAssociationFlow)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && (!BpmnAssociationConnector.Contains(item.ID.Split('_')[1]) || node != null && node.Shape is BpmnTextAnnotation))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && (BpmnAssociationConnector.Contains(item.ID.Split('_')[1])))
                        {
                            if (item.Text == "Association")
                            {
                                item.IconCss = "e-icons e-check";
                            }
                            else
                            {
                                item.IconCss = "e-icons e-uncheck";
                            }
                            if (item.Text == "Direction")
                            {
                                if (bpmnShape.Flow == BpmnFlowType.AssociationFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.DirectionalAssociationFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "One")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.BiDirectionalAssociationFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Both")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (bpmnShape.Flow == BpmnFlowType.MessageFlow || bpmnShape.Flow == BpmnFlowType.NonInitiatingMessageFlow || bpmnShape.Flow == BpmnFlowType.InitiatingMessageFlow)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && (!BpmnMessageConnector.Contains(item.ID.Split('_')[1]) || node != null && node.Shape is BpmnTextAnnotation))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && (BpmnMessageConnector.Contains(item.ID.Split('_')[1]) || node != null && node.Shape is BpmnTextAnnotation))
                        {
                            if (item.Text == "Message Flow")
                            {
                                item.IconCss = "e-icons e-check";
                            }
                            else
                            {
                                item.IconCss = "e-icons e-uncheck";
                            }
                            if (item.Text == "Initiating")
                            {
                                if (bpmnShape.Flow == BpmnFlowType.MessageFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.InitiatingMessageFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Initiating")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.NonInitiatingMessageFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Non-Initiating")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (bpmnShape.Flow == BpmnFlowType.SequenceFlow || bpmnShape.Flow == BpmnFlowType.ConditionalSequenceFlow || bpmnShape.Flow == BpmnFlowType.DefaultSequenceFlow)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && (!BpmnSequenceConnector.Contains(item.ID.Split('_')[1]) || node != null && node.Shape is BpmnTextAnnotation))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && (BpmnSequenceConnector.Contains(item.ID.Split('_')[1]) || node != null && node.Shape is BpmnTextAnnotation))
                        {
                            if (item.Text == "Sequence Flow")
                            {
                                item.IconCss = "e-icons e-check";
                            }
                            else
                            {
                                item.IconCss = "e-icons e-uncheck";
                            }
                            if (item.Text == "Condition")
                            {
                                if (bpmnShape.Flow == BpmnFlowType.SequenceFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.ConditionalSequenceFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Conditional")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnShape.Flow == BpmnFlowType.DefaultSequenceFlow)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Default")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else if (Diagram.SelectionSettings.Nodes.Count == 0 && Diagram.SelectionSettings.Connectors.Count == 0)
        {
            foreach (var item in args.Items)
            {
                if (item.ID.Split('_')[0] == "bpmn")
                {
                    args.HiddenItems.Add(item.ID);
                }
            }
        }
        else if (Diagram.SelectionSettings.Nodes.Count != 0 && Diagram.SelectionSettings.Connectors.Count != 0)
        {
            Node node = Diagram.SelectionSettings.Nodes[0];

            if (node.Shape.Type == NodeShapes.Bpmn)
            {
                if (node.Shape is BpmnEvent bpmnEvent)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !Event.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && Event.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Event Type")
                            {
                                if (bpmnEvent.EventType == BpmnEventType.Start)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Start")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.NonInterruptingStart)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Start (Non-Interrupting)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.Intermediate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Intermediate")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.NonInterruptingIntermediate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Intermediate (Non-Interrupting)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.ThrowingIntermediate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Intermediate (Throwing)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.EventType == BpmnEventType.End)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "End")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Trigger/Result")
                            {
                                if (bpmnEvent.Trigger == BpmnEventTrigger.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Error)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Error")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Timer)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Timer")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Terminate)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Terminate")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Multiple)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Multiple")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Message)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Message")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Cancel)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Cancel")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Compensation)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Compensation")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Conditional)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Conditional")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Error)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Error")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Parallel)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel Multiple")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnEvent.Trigger == BpmnEventTrigger.Link)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Link")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnGateway bpmnGateway)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !GateWay.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && GateWay.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "GateWay Type")
                            {
                                if (bpmnGateway.GatewayType == BpmnGatewayType.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.Inclusive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Inclusive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }

                                if (bpmnGateway.GatewayType == BpmnGatewayType.Exclusive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Exclusive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }

                                if (bpmnGateway.GatewayType == BpmnGatewayType.Parallel)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }

                                if (bpmnGateway.GatewayType == BpmnGatewayType.EventBased)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event Based")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }

                                if (bpmnGateway.GatewayType == BpmnGatewayType.ExclusiveEventBased)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event Based (Exclusive)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.ParallelEventBased)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event Based (Parallel)")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnGateway.GatewayType == BpmnGatewayType.Complex)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Complex")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnMessage)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !Message.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && Message.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                    }
                }
                else if (node.Shape is BpmnDataObject bpmnDataObject)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !DataObject.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && DataObject.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Collection")
                            {
                                foreach (var subItem in item.Items)
                                {
                                    if ((subItem.Text == "Collection" && bpmnDataObject.IsCollectiveData) || (subItem.Text == "None" && !bpmnDataObject.IsCollectiveData))
                                    {
                                        subItem.IconCss = "e-icons e-check";
                                    }
                                    else
                                    {
                                        subItem.IconCss = "e-icons e-uncheck";
                                    }
                                }
                            }
                            if (item.Text == "Data Object")
                            {
                                foreach (var subItem in item.Items)
                                {
                                    if (subItem.Text == bpmnDataObject.Type.ToString())
                                    {
                                        subItem.IconCss = "e-icons e-check";
                                    }
                                    else
                                    {
                                        subItem.IconCss = "e-icons e-uncheck";
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnDataStore)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !DataStore.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                    }
                }
                else if (node.Shape is BpmnActivity bpmnActivity)
                {
                    foreach (var item in args.Items)
                    {
                        if (bpmnActivity.ActivityType == BpmnActivityType.Task)
                        {
                            if (item.ID.Split('_')[0] == "bpmn" && !(Activity.Contains(item.ID.Split('_')[1]) || ActivityTask.Contains(item.ID.Split('_')[1])))
                            {
                                args.HiddenItems.Add(item.ID);
                            }
                            if (item.Text == "Task Type")
                            {
                                if (bpmnActivity.TaskType == BpmnTaskType.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Service)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Service")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Receive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Receive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Send)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Send")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.InstantiatingReceive)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Instantiating Receive")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Manual)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Manual")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.BusinessRule)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Business Rule")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.User)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "User")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.TaskType == BpmnTaskType.Script)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Script")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Call")
                            {
                                if (bpmnActivity.IsCall)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }

                        }
                        if (bpmnActivity.ActivityType == BpmnActivityType.CollapsedSubProcess)
                        {
                            if (item.ID.Split('_')[0] == "bpmn" && !(Activity.Contains(item.ID.Split('_')[1]) || ActivityCollapsedSubProcess.Contains(item.ID.Split('_')[1])))
                            {
                                args.HiddenItems.Add(item.ID);
                            }
                            if (item.ID.Split('_')[0] == "bpmn" && ActivityCollapsedSubProcess.Contains(item.ID.Split('_')[1]))
                            {
                                if (item.Text == "Ad-Hoc")
                                {
                                    if (bpmnActivity.IsAdhoc)
                                    {
                                        item.IconCss = "e-icons e-check";
                                    }
                                    else
                                    {
                                        item.IconCss = "e-icons e-uncheck";
                                    }
                                }

                                if (item.Text == "Boundary")
                                {
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Default)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Default")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Event)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Event")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Call)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Call")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }
                                    if (bpmnActivity.SubProcessType == BpmnSubProcessType.Transaction)
                                    {
                                        foreach (var subItem in item.Items)
                                        {
                                            if (subItem.Text == "Transaction")
                                            {
                                                subItem.IconCss = "e-icons e-check";
                                            }
                                            else
                                            {
                                                subItem.IconCss = "e-icons e-uncheck";
                                            }
                                        }
                                    }

                                }
                            }
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && Activity.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Loop")
                            {
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.Standard)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Standard")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.ParallelMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.Loop == BpmnLoopCharacteristic.SequenceMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Sequential Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Compensation")
                            {
                                if (bpmnActivity.IsCompensation)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }
                            if (item.Text == "Activity Type")
                            {
                                if (bpmnActivity.ActivityType == BpmnActivityType.Task)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Task")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnActivity.ActivityType == BpmnActivityType.CollapsedSubProcess)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Collapsed Sub-Process")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnExpandedSubProcess bpmnExpandedSubProcess)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !ExpandedSubProcess.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && ExpandedSubProcess.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Loop")
                            {
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.None)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "None")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.Standard)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Standard")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.ParallelMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Parallel Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.Loop == BpmnLoopCharacteristic.SequenceMultiInstance)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Sequential Multi-Instance")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                            if (item.Text == "Compensation")
                            {
                                if (bpmnExpandedSubProcess.IsCompensation)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }
                            if (item.Text == "Ad-Hoc")
                            {
                                if (bpmnExpandedSubProcess.IsAdhoc)
                                {
                                    item.IconCss = "e-icons e-check";
                                }
                                else
                                {
                                    item.IconCss = "e-icons e-uncheck";
                                }
                            }
                            if (item.Text == "Boundary")
                            {
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Default)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Default")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Event)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Event")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Call)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Call")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnExpandedSubProcess.SubProcessType == BpmnSubProcessType.Transaction)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Transaction")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else if (node.Shape is BpmnTextAnnotation bpmnTextAnnotation)
                {
                    foreach (var item in args.Items)
                    {
                        if (item.ID.Split('_')[0] == "bpmn" && !TextAnnotation.Contains(item.ID.Split('_')[1]))
                        {
                            args.HiddenItems.Add(item.ID);
                        }
                        if (item.ID.Split('_')[0] == "bpmn" && TextAnnotation.Contains(item.ID.Split('_')[1]))
                        {
                            if (item.Text == "Orientation")
                            {
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Left)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Left")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Right)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Right")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Top)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Top")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Bottom)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Bottom")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                                if (bpmnTextAnnotation.TextAnnotationDirection == TextAnnotationDirection.Auto)
                                {
                                    foreach (var subItem in item.Items)
                                    {
                                        if (subItem.Text == "Auto")
                                        {
                                            subItem.IconCss = "e-icons e-check";
                                        }
                                        else
                                        {
                                            subItem.IconCss = "e-icons e-uncheck";
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

    }

    /// <summary>
    /// Sets the cursor for a specific diagram element action.
    /// </summary>
    /// <param name="action">The diagram element action for which to set the cursor.</param>
    /// <param name="active">A flag indicating whether the cursor is in an active state.</param>
    /// <param name="handle">The handle associated to the current position</param>
    public string cursor(DiagramElementAction action, bool active, string handle)
    {
       #pragma warning disable CS8603 
        string? cursors = null;
        if (handle == "Draw")
        {
            cursors = "crosshair";
        }     
        return cursors;
#pragma warning restore CS8603 
    }
    /// <summary>
    /// Retrieves a custom tool associated with a specific diagram element action and identifier.
    /// </summary>
    /// <param name="action">The diagram element action</param>
    /// <param name="id">The identifier of the custom tool to retrieve.</param>
    /// <returns>The custom tool associated with the specified action and identifier, or null if not found.</returns>   
    public InteractionControllerBase GetCustomTool(DiagramElementAction action, string id)
    {
        InteractionControllerBase? tool = null;
        if (id == "Draw")
        {
            tool = new DrawTool(Diagram);
        }
        else if (id == "Delete")
        {
            tool = new AddDeleteTool(Diagram);
        }
        else
        {
            Parent.MenuBar.IsPasteOptionEnabled = true;
            tool = new CloneAndTool(Diagram);
        }
        return tool;
    }
    /// <summary>
    /// Represents an interaction controller that provides cloning and custom tool functionality.
    /// </summary>  
    public class CloneAndTool : InteractionControllerBase
    {
        SfDiagramComponent sfDiagram;      
        public CloneAndTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            sfDiagram = Diagram;
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            base.OnMouseDown(args);
            sfDiagram.Copy();
            sfDiagram.Paste();                    
        }       
    }

    /// <summary>
    /// Represents an interaction controller that provides add and delete tool functionality.
    /// </summary>
    /// <remarks>
    /// This class serves as an implementation of an interaction controller with added features for adding and deleting objects.
    /// It inherits from the base class <see cref="InteractionControllerBase"/>.
    /// Interaction controllers are responsible for managing user interactions with the application or components,
    /// such as mouse events, touch gestures, or other input mechanisms.
    /// The <see cref="AddDeleteTool"/> class extends the functionality provided by the base class to include tools
    /// for adding new objects to the diagram and deleting existing objects from the diagram.
    /// </remarks>
    public class AddDeleteTool : InteractionControllerBase
    {
        SfDiagramComponent sfDiagram;
        Node deleteObject = new Node();
        public AddDeleteTool(SfDiagramComponent Diagram) : base(Diagram)
        {
            sfDiagram = Diagram;
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            if (sfDiagram.SelectionSettings.Nodes.Count > 0 && ((sfDiagram.SelectionSettings.Nodes[0]) is Node))
            {
                deleteObject = (sfDiagram.SelectionSettings.Nodes[0]) as Node;
            }
            base.OnMouseDown(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            if (deleteObject != null)
            {
                sfDiagram.StartGroupAction();
                sfDiagram.BeginUpdate();
                sfDiagram.Nodes.Remove(deleteObject);
                _ = sfDiagram.EndUpdate();
                sfDiagram.EndGroupAction();
            }
            base.OnMouseUp(args);
            this.InAction = true;
        }

    }

    /// <summary>
    /// Represents an interaction controller for drawing connectors between diagram elements.
    /// </summary>
    /// <remarks>
    /// This class serves as an implementation of an interaction controller specialized in drawing connectors,
    /// such as lines or arrows, between diagram elements.
    /// It inherits from the base class <see cref="ConnectorDrawingController"/>.
    /// Interaction controllers are responsible for managing user interactions with the application or components,
    /// such as mouse events, touch gestures, or other input mechanisms.
    /// The <see cref="DrawTool"/> class extends the functionality provided by the base class to include tools
    /// for drawing connectors between diagram elements, allowing users to create visual connections between objects.
    /// </remarks>  
    public class DrawTool : ConnectorDrawingController
    {
        SfDiagramComponent sfDiagram;
        Connector newConnector = new Connector();
        public DrawTool(SfDiagramComponent Diagram) : base(Diagram, DiagramElementAction.ConnectorSourceEnd)
        {
            sfDiagram = Diagram;
            newConnector = new Connector()
                {
                    ID = "BpmnConnector",
                    SourceID = sfDiagram.SelectionSettings.Nodes[0].ID,
                    Shape = new BpmnFlow() { Flow = BpmnFlowType.SequenceFlow },
                    Type = ConnectorSegmentType.Orthogonal,
                };
#pragma warning disable BL0005
            Diagram.InteractionController = DiagramInteractions.DrawOnce;
            Diagram.DrawingObject = newConnector;
#pragma warning restore BL0005
        }
        public override void OnMouseDown(DiagramMouseEventArgs args)
        {
            base.OnMouseDown(args);
        }
        public override void OnMouseUp(DiagramMouseEventArgs args)
        {
            base.OnMouseUp(args);
        }
    }

    /// <summary>
    /// This method will be called when node's/connector's position is changed.
    /// </summary>
    /// <param name="args">The event arguments containing information about the position change.</param>
    private void PositionChanged(PositionChangedEventArgs args)
    {
        Parent.DiagramPropertyPanel.UpdatePropertyPanel();

    }
    /// <summary>
    /// This method will be called when node's/connector's size is changed.
    /// </summary>
    /// <param name="args">The event arguments containing information about the size change.</param>
    private void SizeChanged(SizeChangedEventArgs args)
    {
        Parent.DiagramPropertyPanel.UpdatePropertyPanel();
    }
    /// <summary>
    /// This method will be called when node's/connector's rotation angle is changed.
    /// </summary>
    /// <param name="args">The event arguments containing information about the rotation angle.</param>
    private void RotateChanged(RotationChangedEventArgs args)
    {
        Parent.DiagramPropertyPanel.NodeRotateAngleValue(args.NewValue.RotationAngle);
    }
    /// <summary>
    /// This method will be called when a symbol is dragged and dropped from the symbol palette to the drawing area.
    /// </summary>
    /// <param name="args">The event arguments containing information about the node/connector</param>
    private void Drop(DropEventArgs args)
    {
        if(args.Element is Node)
        {
            Parent.DiagramPropertyPanel.slider();
        }
        else if(args.Element is Connector)
        {
            Parent.DiagramPropertyPanel.sliderConnector();
        }
        if (args.Element != null && args.Element is Connector connector)
        { 
            if (connector.ID.Contains("MessageFlow"))
                connector.Shape = new BpmnFlow() { Flow = BpmnFlowType.MessageFlow };
        }
        if (args.Element is Node node && node.Tooltip != null)
        {
            node.Tooltip = null;
            node.Constraints &= ~NodeConstraints.Tooltip;
        }
        else if (args.Element is Connector connector1 && connector1.Tooltip != null)
        {
            connector1.Tooltip = null;
            connector1.Constraints &= ~ConnectorConstraints.Tooltip;
        }

    }

    /// <summary>
    /// Event handler for the selection changed event in the Syncfusion Blazor Diagram component.
    /// </summary>
    /// <param name="args">The event arguments containing information about the selection change.</param>

    private async Task SelectionChanged(Syncfusion.Blazor.Diagram.SelectionChangedEventArgs args)
    {
        bool hasContinuousDraw = Diagram.InteractionController.HasFlag(DiagramInteractions.ContinuousDraw);
        if (Diagram.DrawingObject == null && ((!hasContinuousDraw) || (hasContinuousDraw && args.NewValue.Count > 0)))
        {
            await Parent.Toolbar.EnableToolbarItems(args.NewValue, "selectionchange");
            int ObjectsLength = Diagram.SelectionSettings.Nodes.Count + Diagram.SelectionSettings.Connectors.Count;
            Parent.DiagramPropertyPanel.removeClassInElement("nodePropertyContainer", " multiple");
            Parent.DiagramPropertyPanel.removeClassInElement("nodePropertyContainer", " connector");

            if  (ObjectsLength > 1 && (Diagram.SelectionSettings.Nodes.Count > 0 && (Diagram.SelectionSettings.Connectors.Count > 0)))
            {
                diagramSelected = false;
                Diagram.SelectionSettings.UserHandles[0].VisibleTarget = VisibleTarget.Node | VisibleTarget.Connector;
                Diagram.SelectionSettings.UserHandles[1].VisibleTarget = VisibleTarget.Node | VisibleTarget.Connector;
                Diagram.SelectionSettings.UserHandles[2].VisibleTarget = VisibleTarget.Node | VisibleTarget.Connector;
                this.MultipleSelectionSettings(args.NewValue);
            }
            else if (ObjectsLength > 1 && (Diagram.SelectionSettings.Nodes.Count > 0 || (Diagram.SelectionSettings.Connectors.Count > 0)))
            {
                diagramSelected = false;
                Diagram.SelectionSettings.UserHandles[0].VisibleTarget = VisibleTarget.Node;
                Diagram.SelectionSettings.UserHandles[1].VisibleTarget = VisibleTarget.Node;
                Diagram.SelectionSettings.UserHandles[2].VisibleTarget = VisibleTarget.Node;
                Diagram.SelectionSettings.UserHandles[0].Visible = true;
                Diagram.SelectionSettings.UserHandles[1].Visible = true;
                Diagram.SelectionSettings.UserHandles[2].Visible = true;
                Parent.DiagramContent.StateChanged();
                this.MultipleSelectionSettings(args.NewValue);
            }
            else if (ObjectsLength == 1 && (Diagram.SelectionSettings.Nodes.Count == 1 || Diagram.SelectionSettings.Connectors.Count == 1))
            {                

                if (Diagram.SelectionSettings.Nodes.Count == 1)
                {


                    Node node = Diagram.SelectionSettings.Nodes[0];
                    if (node.Shape is BpmnTextAnnotation)
                    {
                        Diagram.SelectionSettings.UserHandles[0].Visible = false;
                        Diagram.SelectionSettings.UserHandles[1].Visible = false;
                        Diagram.SelectionSettings.UserHandles[2].Visible = false;
                    }else
                    {
                        Diagram.SelectionSettings.UserHandles[0].Visible = true;
                        Diagram.SelectionSettings.UserHandles[1].Visible = true;
                        Diagram.SelectionSettings.UserHandles[2].Visible = true;
                    }
                    Parent.DiagramPropertyPanel.PanelVisibility();
                    Parent.DiagramPropertyPanel.slider();

                }
                else if (Diagram.SelectionSettings.Connectors.Count == 1)
                {
                    if (Diagram.SelectionSettings.Connectors.Count > 0)
                    {
                        Parent.DiagramPropertyPanel.PanelVisibility();
                        Parent.DiagramPropertyPanel.sliderConnector();
                    }
                    Diagram.SelectionSettings.UserHandles[0].VisibleTarget = VisibleTarget.Node;
                    Diagram.SelectionSettings.UserHandles[1].VisibleTarget = VisibleTarget.Node;
                    Diagram.SelectionSettings.UserHandles[2].VisibleTarget = VisibleTarget.Node;

                }

                diagramSelected = false;

                Parent.Toolbar.SingleSelectionToolbarItems();
            }
            else
            {
                diagramSelected = true;
                Parent.DiagramPropertyPanel.PanelVisibility();
                Parent.DiagramPropertyPanel.BindDiagramProperties();
                Parent.Toolbar.DiagramSelectionToolbarItems();
            }           
            StateHasChanged();
        }else
        {
            if (Diagram.DrawingObject != null && Diagram.DrawingObject is Connector)
            {
                 Diagram.SelectionSettings.UserHandles[0].VisibleTarget = VisibleTarget.Node;
                Diagram.SelectionSettings.UserHandles[1].VisibleTarget = VisibleTarget.Node;
                Diagram.SelectionSettings.UserHandles[2].VisibleTarget = VisibleTarget.Node;
            }
            StateHasChanged();
        }
    }

    /// <summary>
    /// Event handler for the history changed event in the Syncfusion Blazor Diagram component.
    /// </summary>
    /// <param name="args">The event arguments containing information about the history change.</param>
    private async Task HistoryChange(HistoryChangedEventArgs args)
    {
        await Parent.Toolbar.EnableToolbarItems(new object() { }, "historychange");
    }
    /// <summary>
    /// Event handler for the scroll changed event.
    /// </summary>
    /// <param name="args">The event arguments containing information about the scroll change.</param>
    private void ScrollChanged(ScrollChangedEventArgs args)
    {
        if((Parent.DiagramContent.CurrentZoom >= 0.25 && Parent.DiagramContent.CurrentZoom <= 30) && Parent.Toolbar.ZoomItemDropdownContent != FormattableString.Invariant($"{Math.Round(Parent.DiagramContent.CurrentZoom * 100)}") + "%")
        {
            Parent.Toolbar.DiagramZoomValueChange();
        }
    }

    private void MultipleSelectionSettings(ObservableCollection<IDiagramObject> SelectedItems)
    {
        Parent.DiagramPropertyPanel.PropertyPanelVisibility();
        bool showConnectorPanel = false; bool showNodePanel = false;
        bool showTextPanel = false; bool showConTextPanel = false;

        for (int i = 0; i < Diagram.SelectionSettings.Nodes.Count; i++)
        {
            Node Node = Diagram.SelectionSettings.Nodes[i];
            if (Node != null && (!showNodePanel || !showTextPanel))
            {
                showNodePanel = true;
                showTextPanel = Node.Annotations.Count > 0 && Node.Annotations[0].Content != "" ? true : false;
            }
        }
        for (int i = 0; i < Diagram.SelectionSettings.Connectors.Count; i++)
        {
            Connector Connector = Diagram.SelectionSettings.Connectors[i];
            if (Connector != null && (!showConnectorPanel || !showConTextPanel))
            {
                showConnectorPanel = true;
                showConTextPanel = Connector.Annotations.Count > 0 && Connector.Annotations[0].Content != "" ? true : false;
            }
        }
        if (showNodePanel)
        {

            Parent.DiagramPropertyPanel.gradientPropertyVisibility("nodePropertyContainer", true);

            Parent.DiagramPropertyPanel.addClassInElement("nodePropertyContainer", " multiple");

            if (showConnectorPanel)
            {

                Parent.DiagramPropertyPanel.addClassInElement("nodePropertyContainer", " connector");
            }
            Parent.DiagramPropertyPanel.PanelVisibility();
            if (Diagram.SelectionSettings.Nodes.Count == 1)
                Parent.DiagramPropertyPanel.SingleNodeSelection();
        }
        if (showConnectorPanel && !showNodePanel)
        {
            Parent.DiagramPropertyPanel.PanelVisibility();

            Parent.DiagramPropertyPanel.SingleConnectorSelection();
        }
        if (showTextPanel || showConTextPanel)
        {
            Parent.DiagramPropertyPanel.TextPropertyPanelVisibility();         

        }

        Parent.Toolbar.MutipleSelectionToolbarItems();
    }

    /// <summary>
    /// Sets the Pan mode to diagram tool
    /// </summary>
    public void UpdateTool()
    {
        DiagramTool = DiagramInteractions.ZoomPan;
        StateHasChanged();
    }
    /// <summary>
    /// Sets the connector object of type straight/orthogonal/bezier to the draw object
    /// </summary>
    public void DrawingObject(Syncfusion.Blazor.SplitButtons.MenuEventArgs args)
    {
        if (args.Item.Text == "Straight Line")
        {
            Parent.DiagramContent.DiagramDrawingObject = new Connector() { Type = ConnectorSegmentType.Straight, Constraints = ConnectorConstraints.Default, Style = new ShapeStyle() {  StrokeWidth = 2 } };
        }
        else if (args.Item.Text == "Orthogonal Line")
        {
            Parent.DiagramContent.DiagramDrawingObject = new Connector() { Type = ConnectorSegmentType.Orthogonal, Constraints = ConnectorConstraints.Default, Style = new ShapeStyle() {  StrokeWidth = 2 } };
        }
        else if (args.Item.Text == "Bezier")
        {
            Parent.DiagramContent.DiagramDrawingObject = new Connector() { Type = ConnectorSegmentType.Bezier, Constraints = ConnectorConstraints.Default, Style = new ShapeStyle() {  StrokeWidth = 2 } };
        }
    }

    /// <summary>
    ///This method is used to set the ContinuousDraw to the Drawtool
    /// </summary>
    public void UpdateContinousDrawTool()
    {
        DiagramTool = DiagramInteractions.ContinuousDraw;
        StateHasChanged();
    }
    /// <summary>
    ///This method is used to set the pointer option to the Drawtool
    /// </summary>
    public void UpdatePointerTool()
    {
        DiagramTool = DiagramInteractions.SingleSelect | DiagramInteractions.MultipleSelect;
        StateHasChanged();
    }
    /// <summary>
    /// Zooms to a specific level or region based on the provided zoom options.
    /// </summary>
    /// <param name="options">The zoom options specifying the target zoom level or region.</param>
    public void ZoomTo(ZoomOptions options)
    {
        double factor = options.ZoomFactor != 0 ? options.ZoomFactor : 0.2;
        factor = options.Type == "ZoomOut" ? 1 / (1 + factor) : (1 + factor);
        Diagram.Zoom(factor, null);
    }
    /// <summary>
    /// Represents options for zooming functionality.
    /// </summary>
    public class ZoomOptions
    {
        public double ZoomFactor { get; set; }
        public string Type { get; set; } = "";
    }

    public void StateChanged()
    {
        StateHasChanged();
    }
    /// <summary>
    /// Loads a new diagram based on the provided JSON representation.
    /// </summary>
    /// <param name="Json">The JSON representation of the diagram to load.</param>
    public void LoadNewDiagram(string Json)
    {
        _= Diagram.LoadDiagram(Json);
    }

    /// <summary>
    /// Updates the spacing of elements based on the provided value and type.
    /// </summary>
    /// <param name="value">The spacing value to apply.</param>
    /// <param name="type">The type of spacing to update (e.g., horizontal, vertical).</param>

    public async Task UpdateSpacing(int value, string type)
    {
        SfDiagramComponent diagram = Parent.DiagramContent.Diagram;
        diagram.BeginUpdate();
        if (type == "Horizontal")
            HorizontalSpacing = value;
        else if (type == "Vertical")
            VerticalSpacing = value;
        await diagram.EndUpdate();
    }
    /// <summary>
    /// Updates the alignment of selected objects in the diagram.
    /// </summary>
    /// <param name="alignment">The alignment value to apply (e.g., "left", "right", "center", "top", "bottom", etc.).</param>
    public async Task UpdateAlignment(string alignment)
    {        
        SfDiagramComponent diagram = Parent.DiagramContent.Diagram;
        diagram.BeginUpdate();
        switch (alignment)
        {
            case "Align Left":
                horizontalAlignment = HorizontalAlignment.Left;
                break;
            case "Align Right":
                horizontalAlignment = HorizontalAlignment.Right;
                break;
            case "Align Center":
                horizontalAlignment = HorizontalAlignment.Center;
                break;
            case "Align Top":
                verticalAlignment = VerticalAlignment.Top;
                break;
            case "Align Middle":
                verticalAlignment = VerticalAlignment.Center;
                break;
            case "Align Bottom":
                verticalAlignment = VerticalAlignment.Bottom;
                break;
        }
        await diagram.EndUpdate();
    }
    public void Dispose()
    {
        Service.Notify -= OnNotify;
    }
    // Method to determine whether this command can execute or not.
    public void CanExecute(CommandKeyArgs args)
    {
        args.CanExecute = true;
    }
    // Method to execute the custom command
    public async Task ExecuteCommand(CommandKeyArgs obj)
    {
        {
            if ((Diagram.SelectionSettings.Nodes.Count > 0 || Diagram.SelectionSettings.Connectors.Count > 0))
            {
                if (obj.Name == "duplicate")
                {
                    Diagram.Copy();
                    Diagram.Paste();
                }
                if (obj.Name == "group")
                {
                    GroupObjects();
                }
                if (obj.Name == "unGroup")
                {
                    UngroupObjects();
                }
                if (obj.Name == "sendToBack")
                {
                    Diagram.SendToBack();
                }
                if (obj.Name == "bringToFront")
                {
                    Diagram.BringToFront();
                }

            }
        }
        if (obj.Name == "fileNew")
        {
            if (jsRuntime != null)
            {
                await jsRuntime.InvokeVoidAsync("CommonKeyboardCommands_newDiagram");
            }
        }
        if (obj.Name == "fileOpen")
        {
            await Parent.MenuBar.OpenUploadBox(true, ".json");
        }
        if (obj.Name == "fileSave" && jsRuntime != null)
        {
            string fileName = await jsRuntime.InvokeAsync<string>("getDiagramFileName", "");
            await Parent.MenuBar.Download(fileName);
        }
    }
    /// <summary>
    /// Group the selected objects in the diagram.
    /// </summary>
    public void GroupObjects()
    {
        Diagram.Group();
        Parent.Toolbar.GroupIcon = "e-icons sf-icon-Ungroup tb-icons";
        Parent.Toolbar.GroupToolTip = "UnGroup";
        Parent.Toolbar.StateChanged();
    }
    /// <summary>
    /// Ungroups the selected objects in the diagram.
    /// </summary>
    public void UngroupObjects()
    {   
        Diagram.Ungroup();
        Diagram.ClearSelection();
        diagramSelected = true;
        Parent.Toolbar.GroupIcon = "e-icons sf-icon-Group tb-icons";
        Parent.Toolbar.GroupToolTip = "Group";
        Parent.DiagramPropertyPanel.PanelVisibility();
        Parent.DiagramPropertyPanel.BindDiagramProperties();
        Parent.Toolbar.DiagramSelectionToolbarItems();
    }   
      
    public string RandomId()
    {
        Random random = new Random();
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
#pragma warning disable CA5394 // Do not use insecure randomness
        return new string(Enumerable.Repeat(chars, 5)
          .Select(s => s[random.Next(s.Length)]).ToArray());
#pragma warning restore CA5394 // Do not use insecure randomness
    }
    /// <summary>
    /// Event handler for the text changed event .
    /// </summary>
    /// <param name="args">The event arguments containing information about the text change.</param>
    private async void TextChanged(TextChangeEventArgs args)
    {
        if(args != null)
        {
            if((!string.IsNullOrEmpty(args.OldValue) || string.IsNullOrWhiteSpace(args.OldValue)) && args.NewValue.Length > 0 && args.Element != null)
            {
                await Task.Delay(1);
                Node? node = args.Element is Node ? args.Element as Node : null;
                Connector? connector = args.Element is Connector ? args.Element as Connector : null;
                if ((node != null && node.Annotations != null && node.Annotations.Count > 0 && (node.Annotations[0].Content != "" || (node.Annotations[0].Hyperlink != null && (node.Annotations[0].Hyperlink.Url != "" || node.Annotations[0].Hyperlink.Content != "")))) || ((connector != null && connector.Annotations != null && connector.Annotations.Count > 0 && connector.Annotations[0].Content != string.Empty)))
                {
                    if (node != null && node.Annotations != null && node.Annotations[0] != null && node.Annotations[0]?.Hyperlink != null)
                    {
                        HyperlinkSettings hyperlink = node.Annotations[0].Hyperlink;
                        node.Annotations[0].Hyperlink = new HyperlinkSettings() { Content = !string.IsNullOrEmpty(hyperlink.Content) ? node.Annotations[0].Content : string.Empty, Url = hyperlink.Content != "" ? hyperlink.Url : node.Annotations[0].Content };
                    }
                    Parent.DiagramPropertyPanel.PanelVisibility();
                    Parent.DiagramPropertyPanel.slider();
                    StateChanged();
                }
            }
        }
    }

    /// <summary>
    /// Event handler for the collection changed event.
    /// </summary>
    /// <param name="args">The event arguments containing information about the collection change.</param>

    private void CollectionChanged(CollectionChangedEventArgs args)
    {
       
        if(args.Action == CollectionChangedAction.Remove)
        {
            diagramSelected = true;
            Parent.DiagramPropertyPanel.PanelVisibility();
            Parent.DiagramPropertyPanel.BindDiagramProperties();
            Parent.Toolbar.DiagramSelectionToolbarItems();
            StateHasChanged();
        }
    }
}